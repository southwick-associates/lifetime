% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/model-YrsAnnual.R
\name{yrs_zero}
\alias{yrs_zero}
\alias{yrs_zero_split}
\alias{yrs_zero_filter}
\alias{yrs_zero_sample}
\title{Prepare history table for retention calculation}
\usage{
yrs_zero_split(history)

yrs_zero_filter(history_split, func)

yrs_zero_sample(history_split, samp_size, set_seed = TRUE)
}
\arguments{
\item{history}{license history data frame}

\item{history_split}{license history list produced by yrs_zero_split()}

\item{func}{function to be used for subsetting customers}

\item{samp_size}{customer sample size passed to \code{\link[base]{sample}}}

\item{set_seed}{if TRUE, will run \code{\link[base]{set.seed}} for reproducibility}
}
\description{
Splitting a history table into two data frames: (1) $year0 is a copy
of the input history table while (2) $history is a copy with just 2 columns:
cust_id and year. This data structure is intended to allow for easy filtering
prior to calculating retention curves (details in section below).
}
\details{
The "year zero" framework identifies the characteristics of interest for
retention curves. For example, if we look at customers in 2008 (i.e. year0 =
2008), the retention curve is represented by the percentage of these customers
who hold licenses in subsequent years.

This year zero focus complicates things if we want to filter customers though.
Say we want to look at retention for 30-year-olds. If we applied a filter
directly to the history table, we wouldn't be able to calculate retention b/c
the future sales of these customers would be dropped. The yrs_zero_filter()
function makes it easy to look at specific sets of customers once yrs_zero_split()
has been run.
}
\section{Functions}{
\itemize{
\item \code{yrs_zero_split}: Split history data frame into a list

\item \code{yrs_zero_filter}: Filter customers prior to retention calculation

\item \code{yrs_zero_sample}: Sample customers prior to retention calculation
}}

\examples{
library(dplyr)
data(all_sports)

# manually calculate retention for those aged 30-50 in 2010
# - this is a bit awkward and it's easy to make a mistake
#   we also need to keep in mind that only 2011-onward is relevant
year0 <- filter(all_sports, age_year \%in\% 30:50, year == 2010)
all_sports \%>\%
    semi_join(year0, by = "cust_id") \%>\%
    count(year) \%>\%
    mutate(retain_rate = n / max(n))

# the "yrs_zero" functions make filtering more straightforward
df_split <- yrs_zero_split(all_sports) \%>\%
    yrs_zero_filter(function(x) filter(x, age_year \%in\% 30:50, year == 2010))
df_split$year0
df_split$history

# downstream calculations are consistent, irrespective of customer filter
yrs_calc_retain(df_split)
yrs_zero_sample(df_split, 1000) \%>\% yrs_calc_retain()
yrs_zero_split(all_sports) \%>\%
    yrs_zero_filter(function(x) filter(x, age_year \%in\% 25:35)) \%>\%
    yrs_calc_retain()
}
\seealso{
Other functions to estimate annual license buying: \code{\link{yrs_avidity}},
  \code{\link{yrs_calc_avg}}, \code{\link{yrs_calc}},
  \code{\link{yrs_fit}}, \code{\link{yrs_lifetime}},
  \code{\link{yrs_plot}}, \code{\link{yrs_predict_avg}},
  \code{\link{yrs_predict}}, \code{\link{yrs_result}}
}
\concept{functions to estimate annual license buying}
